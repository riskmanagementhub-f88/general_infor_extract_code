declare @start_date date ='2020-12-21'
declare @end_date   date ='2020-12-31'
select top 5 cd.name category_name, po.*, kt.PaperType, sd.area, sd.name shop_name, 
case 
	when po.previous_pawn is null then N'Khách mới' 
else N'Khách cũ' end "cus_type",
case 
	when po.previous_pawn_status is null then N'KH mới vay lần đầu' 
	when po.previous_pawn_status in (77,88,99) then N'KH đang nợ xấu'
	when po.previous_pawn_status = 14 then N'7.Vay thêm'
	when po.previous_pawn_status = 1 and pre_pawn_last_close_day = po.FromDate then N'0.Đáo hạn'
else (
	case 
		when po.sleep_day>180 then N'6.Mở lại từ 181 ngày'
		when po.sleep_day>90 then N'5.Mở lại từ 91-180 ngày' 
		when po.sleep_day> 60 then N'4.Mở lại từ 61-90 ngày'
		when po.sleep_day> 30 then N'3.Mở lại từ 31-60 ngày'
	else N'2.Mở lại từ 1-30 ngày' end ) 
end open_type,
case
	when previous_pawn_package like '%NHANH%' then N'Vay nhanh'
else N'Vay thường' 
end previous_pawn_package_type,
po.net_disbur/paf.MoneyAppraisal ltv_index,
podd.total_principal_money, podd.loan_org_paid_type
from
(
Select pawnid, CodeNo, right([CodeNo], len([CodeNo]) - 5) as shorten_pawn_code,
FromDate, ToDate, closedate,
CategoryCode, shopID, ShopCode, Frequency,   
LoanMoneyOrg, [InsurranceMoney], (LoanMoneyOrg - [InsurranceMoney]) net_disbur,
case 
	when PackageCode like '%NHANH%' then N'Vay nhanh'
else N'Vay thường' end package_type, 
case 
	when PackageCode is null then N'Vay thường'
else PackageCode end detail_package_type, 
case 
	when STATUS = -1 then N'Đã thanh lý'
	when STATUS = 1 then N'Đã đóng'
	when STATUS = 14 then N'Đang vay'
	when STATUS in ('77','88','99') then N'Nợ xấu'
else N'Nháp' end pawn_status, 

case 
	when CategoryCode like '%17%' then
		case 
			when (LoanMoneyOrg - [InsurranceMoney]) <= 3000000 then '0. <=3tr'
			when (LoanMoneyOrg - [InsurranceMoney]) <= 10000000 then '1. 3-10tr'
			when (LoanMoneyOrg - [InsurranceMoney]) <= 15000000 then '2. 10-15tr'
			when (LoanMoneyOrg - [InsurranceMoney]) <= 25000000 then '3. 15-25tr'
		else '4. >25tr' end 
	when CategoryCode like '%15%' then
		case 
			when (LoanMoneyOrg - [InsurranceMoney]) <= 50000000 then '0. <=50tr'
			when (LoanMoneyOrg - [InsurranceMoney]) <= 100000000 then '1. 50-100tr'
			when (LoanMoneyOrg - [InsurranceMoney]) <= 200000000 then '2. 100-200tr'
			when PackageCode is not null and  (LoanMoneyOrg - [InsurranceMoney]) > 200000000 then N'4. >200tr'
			when PackageCode is null and  (LoanMoneyOrg - [InsurranceMoney]) <= 300000000 then '3. 200-300tr'
		else N'4. >300tr' end 
 end package_money_range,
 case 
	when frequency <= 30 then N'1. Kỳ hạn 1 tháng'
	when frequency <= 90 then N'2. Kỳ hạn 3 tháng'
	when frequency <= 180 then N'3. Kỳ hạn 6 tháng'
	when frequency <= 270 then N'4. Kỳ hạn 9 tháng'
	when frequency <= 360 then N'5. Kỳ hạn 12 tháng'
  else N'6. >12 tháng' end package_time_range,
  
	DATEDIFF(d, Lag(CloseDate) over (PARTITION BY customerid order by fromdate),Fromdate) sleep_day, 
	Lag (Pawnid) over (PARTITION BY customerid, [CategoryCode] ORDER BY fromdate asc) as previous_pawn_id,
	Lag (CodeNo) over (PARTITION BY customerid, [CategoryCode] ORDER BY fromdate asc) as previous_pawn, 
	Lag(MoneyCurrent) over (PARTITION BY customerid,[CategoryCode] order by fromdate) as balance_of_previous_pawn,
	Lag(LoanMoneyOrg) over (PARTITION BY customerid, [CategoryCode] order by fromdate) as previous_loan_org,
	Lag(InsurranceMoney) over (PARTITION BY customerid, [CategoryCode] order by fromdate) as previous_pawn_insurance,
	Lag(Status) over (PARTITION BY customerid,[CategoryCode] order by fromdate) as previous_pawn_status,
	Lag(ShopCode) over (PARTITION BY customerid, [CategoryCode] order by fromdate) as previous_shop_code,
	Lag(PackageCode) over (PARTITION BY customerid, [CategoryCode] order by fromdate) previous_pawn_package,
	Lag(FromDate) over (PARTITION BY customerid, [CategoryCode] order by fromdate) as pre_pawn_last_open_day,
	Lag(CloseDate) over (PARTITION BY customerid, [CategoryCode] order by fromdate) as pre_pawn_last_close_day
from  [dwh].[dbo].[Pawn]
where 
	status in (-1,1, 14, 77, 88, 99)
	and shopcode not like '%HS%' 
	and shopcode not like '%TEST%') po
left join dwh.dbo.W_PAWN_APPRAISAL_F paf on paf.pawnid = po.pawnid
left join (
	select ShopID, Code, Name, 
	case 
		when AreaID = 1 then 'MB' 
		when AreaID = 2 then 'MN' else 'MT' end "area"
	from [dwh].[dbo].[ShopDetail] 
	where AreaID is not null
) sd on sd.ShopID = po.ShopID
left join W_CATEGORY_D cd on cd.code = po.categorycode
left join (
	select distinct(cp1.PawnID), cp2.PaperType 
	from W_CUSTOMER_PAPERs cp1
	inner join W_CUSTOMER_PAPERs cp2 on cp1.PawnID=cp2.PawnID) kt on kt.pawnid=po.Pawnid
left join (
	select *
	from pawnoverdue
	where created = fromdate) pod on pod.pawnid = po.pawnid
left join (
	select pawnid, sum(principalmoney) total_principal_money, 'monthly_pmt' loan_org_paid_type
	from pawnoverduedetail
	where InterestMoney like '%lai%'
	group by pawnid
	union all
	(select pawnid, sum(InterestMoney) total_principal_money, 'last_month_pmt' loan_org_paid_type
	from pawnCarOverDue 
	where MoneyInterest like '%lai%'
	group by PawnID)) podd on podd.pawnid = po.pawnid
Where 
	po.fromdate>= @start_date 
	and po.fromdate<=@end_date
	and (
	po.previous_pawn_status in (-1,1, 14, 77, 88, 99)
	or po.previous_pawn_status is null)
